commit 9c2e12ec4e42399558e222d1cb2a7156be6e89b0
Author: u <u@bufn1.brest.local>
Date:   Fri May 3 21:43:13 2024 +0300

    newopcode

diff --git a/0001-Add-empty-2.7.18-NEWS-file.patch b/0001-Add-empty-2.7.18-NEWS-file.patch
new file mode 100644
index 0000000000..6578db4888
--- /dev/null
+++ b/0001-Add-empty-2.7.18-NEWS-file.patch
@@ -0,0 +1,27 @@
+From 8d21aa21f2cbc6d50aab3f420bb23be1d081dac4 Mon Sep 17 00:00:00 2001
+From: Benjamin Peterson <benjamin@python.org>
+Date: Sun, 19 Apr 2020 16:13:39 -0500
+Subject: [PATCH] Add empty 2.7.18 NEWS file.
+
+---
+ Misc/NEWS.d/2.7.18.rst | 8 ++++++++
+ 1 file changed, 8 insertions(+)
+ create mode 100644 Misc/NEWS.d/2.7.18.rst
+
+diff --git a/Misc/NEWS.d/2.7.18.rst b/Misc/NEWS.d/2.7.18.rst
+new file mode 100644
+index 0000000000..3109052671
+--- /dev/null
++++ b/Misc/NEWS.d/2.7.18.rst
+@@ -0,0 +1,8 @@
++.. bpo: 0
++.. date: 2020-04-19
++.. no changes: True
++.. nonce: -vRRLE
++.. release date: 2020-04-19
++.. section: Library
++
++There were no new changes in version 2.7.18.
+-- 
+2.30.2
+
diff --git a/0001-Bump-version-to-2.7.18.patch b/0001-Bump-version-to-2.7.18.patch
new file mode 100644
index 0000000000..76a05ed603
--- /dev/null
+++ b/0001-Bump-version-to-2.7.18.patch
@@ -0,0 +1,31 @@
+From 8323757381eb3f9dbe5b98edd59bfb4a6d80b493 Mon Sep 17 00:00:00 2001
+From: Benjamin Peterson <benjamin@python.org>
+Date: Sun, 19 Apr 2020 16:12:51 -0500
+Subject: [PATCH 1/2] Bump version to 2.7.18.
+
+---
+ Include/patchlevel.h | 6 +++---
+ 1 file changed, 3 insertions(+), 3 deletions(-)
+
+diff --git a/Include/patchlevel.h b/Include/patchlevel.h
+index 91215f8b19..0ce6313fa9 100644
+--- a/Include/patchlevel.h
++++ b/Include/patchlevel.h
+@@ -23,11 +23,11 @@
+ #define PY_MAJOR_VERSION      2
+ #define PY_MINOR_VERSION      7
+ #define PY_MICRO_VERSION      18
+-#define PY_RELEASE_LEVEL      PY_RELEASE_LEVEL_GAMMA
+-#define PY_RELEASE_SERIAL     1
++#define PY_RELEASE_LEVEL      PY_RELEASE_LEVEL_FINAL
++#define PY_RELEASE_SERIAL     0
+ 
+ /* Version as a string */
+-#define PY_VERSION            "2.7.18rc1"
++#define PY_VERSION            "2.7.18"
+ /*--end constants--*/
+ 
+ /* Subversion Revision number of this file (not of the repository). Empty
+-- 
+2.30.2
+
diff --git a/0002-Add-empty-2.7.18-NEWS-file.patch b/0002-Add-empty-2.7.18-NEWS-file.patch
new file mode 100644
index 0000000000..3cc18e4825
--- /dev/null
+++ b/0002-Add-empty-2.7.18-NEWS-file.patch
@@ -0,0 +1,27 @@
+From 8d21aa21f2cbc6d50aab3f420bb23be1d081dac4 Mon Sep 17 00:00:00 2001
+From: Benjamin Peterson <benjamin@python.org>
+Date: Sun, 19 Apr 2020 16:13:39 -0500
+Subject: [PATCH 2/2] Add empty 2.7.18 NEWS file.
+
+---
+ Misc/NEWS.d/2.7.18.rst | 8 ++++++++
+ 1 file changed, 8 insertions(+)
+ create mode 100644 Misc/NEWS.d/2.7.18.rst
+
+diff --git a/Misc/NEWS.d/2.7.18.rst b/Misc/NEWS.d/2.7.18.rst
+new file mode 100644
+index 0000000000..3109052671
+--- /dev/null
++++ b/Misc/NEWS.d/2.7.18.rst
+@@ -0,0 +1,8 @@
++.. bpo: 0
++.. date: 2020-04-19
++.. no changes: True
++.. nonce: -vRRLE
++.. release date: 2020-04-19
++.. section: Library
++
++There were no new changes in version 2.7.18.
+-- 
+2.30.2
+
diff --git a/Include/opcode.h b/Include/opcode.h
index 9ed548729e..951037fa13 100644
--- a/Include/opcode.h
+++ b/Include/opcode.h
@@ -158,7 +158,7 @@ extern "C" {
 
 #define SET_ADD         146
 #define MAP_ADD         147
-
+#define LOAD_FAST_ZERO_LOAD_CONST         148
 
 enum cmp_op {PyCmp_LT=Py_LT, PyCmp_LE=Py_LE, PyCmp_EQ=Py_EQ, PyCmp_NE=Py_NE, PyCmp_GT=Py_GT, PyCmp_GE=Py_GE,
             PyCmp_IN, PyCmp_NOT_IN, PyCmp_IS, PyCmp_IS_NOT, PyCmp_EXC_MATCH, PyCmp_BAD};
diff --git a/Lib/opcode.py b/Lib/opcode.py
index e403365b6a..cec0576866 100644
--- a/Lib/opcode.py
+++ b/Lib/opcode.py
@@ -161,11 +161,16 @@ jrel_op('SETUP_FINALLY', 122)   # ""
 
 def_op('LOAD_FAST', 124)        # Local variable number
 haslocal.append(124)
+
+
+
 def_op('STORE_FAST', 125)       # Local variable number
 haslocal.append(125)
 def_op('DELETE_FAST', 126)      # Local variable number
 haslocal.append(126)
 
+
+
 def_op('RAISE_VARARGS', 130)    # Number of raise arguments (1, 2, or 3)
 def_op('CALL_FUNCTION', 131)    # #args + (#kwargs << 8)
 def_op('MAKE_FUNCTION', 132)    # Number of args with default values
@@ -189,4 +194,8 @@ EXTENDED_ARG = 145
 def_op('SET_ADD', 146)
 def_op('MAP_ADD', 147)
 
+def_op('LOAD_FAST_ZERO_LOAD_CONST', 148)        # Local variable number
+haslocal.append(148)
+hasconst.append(148)
+
 del def_op, name_op, jrel_op, jabs_op
diff --git a/Python/ceval.c b/Python/ceval.c
index e1140a8e40..1d310a799d 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -1243,6 +1243,25 @@ PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
             PUSH(x);
             FAST_DISPATCH();
         }
+        
+TARGET(LOAD_FAST_ZERO_LOAD_CONST)
+  x = GETLOCAL(0);
+   /*x = GETLOCAL(oparg);*/
+  if (x != NULL) {
+    Py_INCREF(x);
+    PUSH(x);
+    x = GETITEM(consts, oparg);
+    Py_INCREF(x);
+    PUSH(x);
+    /*goto fast_next_opcode;*/
+    FAST_DISPATCH();
+}
+format_exc_check_arg(PyExc_UnboundLocalError,
+                     UNBOUNDLOCAL_ERROR_MSG,
+                     PyTuple_GetItem(co->co_varnames, oparg));
+break;
+        
+        
 
         PREDICTED_WITH_ARG(STORE_FAST);
         TARGET(STORE_FAST)
diff --git a/Python/opcode_targets.h b/Python/opcode_targets.h
index 95eb127a15..2974fc2130 100644
--- a/Python/opcode_targets.h
+++ b/Python/opcode_targets.h
@@ -147,6 +147,7 @@ static void *opcode_targets[256] = {
     &&TARGET_EXTENDED_ARG,
     &&TARGET_SET_ADD,
     &&TARGET_MAP_ADD,
+    &&TARGET_LOAD_FAST_ZERO_LOAD_CONST,
     &&_unknown_opcode,
     &&_unknown_opcode,
     &&_unknown_opcode,
diff --git a/Python/peephole.c b/Python/peephole.c
index 11f6f8861c..782f86b5b7 100644
--- a/Python/peephole.c
+++ b/Python/peephole.c
@@ -424,6 +424,16 @@ PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names,
                 memset(codestr+i, NOP, 6);
                 cumlc = 0;
                 break;
+             case LOAD_FAST:
+                 
+                 j = GETARG(codestr, i);
+                 if (codestr[i+3] == LOAD_CONST && j == 0) {
+                     codestr[i+3] = LOAD_FAST_ZERO_LOAD_CONST;
+                     memset(codestr+i, NOP, 3);
+                 }
+                 break;
+                
+                
 
                 /* Try to fold tuples of constants (includes a case for lists
                    which are only used for "in" and "not in" tests).
